{% liquid
  assign c = '{ "errors": {}, "valid": true }' | parse_json

  function c = 'lib/validations/presence', c: c, object: object, field_name: 'item_id'
  function c = 'lib/validations/presence', c: c, object: object, field_name: 'order_id'
  function c = 'lib/validations/presence', c: c, object: object, field_name: 'price_cents'
  function c = 'lib/validations/presence', c: c, object: object, field_name: 'quantity'

  function order = 'lib/queries/orders/find', id: order.id
  if order.status.name != 'app.statuses.orders.placed'
    assign msg = 'app.orders.line-items.errors.wrong-order-status' | t: status: order.status.name
    include 'lib/register_error', contract: c, field_name: 'order_status', message: msg
  endif

  unless item.item_inventory.item_ids contains item.id
    include 'lib/register_error', contract: c, field_name: 'item', key: 'app.orders.line-items.errors.item-outdated'
  endunless
  if item.item_inventory.status.name != 'app.statuses.items.published'
    include 'lib/register_error', contract: c, field_name: 'item', key: 'app.orders.line-items.errors.item-not-published'
  endif

  if item.quantity == null or item.quantity <= 0
    include 'lib/register_error', contract: c, field_name: 'quantity', key: 'app.orders.line-items.errors.quantity-no-items'
  else
    assign max_quantity = item.quantity | at_most: item.item_inventory.max_in_one_order
    function c = 'lib/validations/number', c: c, object: object, field_name: 'quantity', lte: max_quantity, message_lte: 'app.orders.line-items.errors.quantity-too-big'
  endif
  function c = 'lib/validations/number', c: c, object: object, field_name: 'quantity', gt: 0
  function c = 'lib/validations/presence', c: c, object: object, field_name: 'total_price_cents'
  function max_order_value = 'lib/queries/constants/find' name: "MAX_ORDER_VALUE", type: "integer"
  function c = 'lib/validations/number', c: c, object: order, field_name: 'total_price_cents', lte: max_order_value, message_lte: 'app.orders.errors.max_price'

  assign order_currency = order.currency | upcase
  assign item_currency = object.currency | upcase
  function c = 'lib/validations/equal', c: c, given: item_currency, expected: order_currency, key: 'app.models.line_items.errors.order_has_different_currency'

  hash_assign object['valid'] = c.valid
  hash_assign object['errors'] = c.errors

  return object
%}
