{% liquid
  assign _start = 'now' | to_time

  function item_attributes = 'lib/queries/item_attributes/search'
  function operation = 'lib/queries/bulk_operations/find', id: object.operation_id
  assign data = '[]' | parse_json
  assign files = operation.files | select: document_type: 'file'
  for source in files
    try_rc
      function rows = 'lib/commands/items/import/csv/read_file', url: source.file.url
      assign data = data | concat: rows
    catch err
      assign file_broken_error = err
      log err, type: 'ERROR:'
    endtry_rc
  endfor

  if file_broken_error == null
    function file_broken_error = 'lib/commands/bulk_operations/trigger_import/check_file', data: data
  endif

  if file_broken_error
    assign import = '{}' | parse_json
    function _report = 'lib/commands/items/import/reports/create', message: file_broken_error.message, object_uuid: operation.uuid, current_profile: current_profile
    function status = 'lib/commands/statuses/create', profile_id: current_profile.id, object_id: operation.id, name: 'app.statuses.bulk_operations.import.failure', scope: 'app.statuses.bulk_operations.import'

    return import
  endif

  function incoming = 'lib/commands/items/export/group_by_primary_key', list: data
  function current_state = 'lib/commands/items/export/current_state', profile_id: current_profile.id
  function diff = 'lib/commands/items/import/csv/calculate_diff', current: current_state.data, incoming: incoming

  if skip_execution
    function import = 'lib/commands/items/import/csv/v1', data: data, item_attributes: item_attributes.results, owner_uuid: current_profile.id, diff: diff, owner: current_profile, current_state: current_state, operation: operation, dry_run: true
  else
    function import = 'lib/commands/items/import/csv/v1', data: data, item_attributes: item_attributes.results, owner_uuid: current_profile.id, diff: diff, owner: current_profile, current_state: current_state, operation: operation
    if import.valid
      assign status_name = 'app.statuses.bulk_operations.import.done'
    else
      assign status_name = 'app.statuses.bulk_operations.import.failure'
    endif
    function status = 'lib/commands/statuses/create', profile_id: current_profile.id, object_id: operation.id, name: status_name, scope: 'app.statuses.bulk_operations.import'
  endif

  function _report = 'lib/commands/items/import/reports/create', import: import, object_uuid: operation.uuid, diff: diff, current_profile: current_profile

  assign _stop = 'now' | to_time
  assign _diff = _start | time_diff: _stop
  log _diff, type: 'total import time'

  return import
%}
