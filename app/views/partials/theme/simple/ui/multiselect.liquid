{% comment %}
  Multiselect input component

  Arguments:
    - list                  (array, required) an array of objects with items to show, must include 'value' and 'label'
                            [ { value: 'item1value', label: 'Item 1 label' }, { value: 'item2value', label: 'Item 2 label' } ]
    - selected              (array) array with selected values (the same as in the 'list')
                            [ 'item2value' ]

    - form                  (string) the <form> element that the multiselect corresponds to
    - name                  (string) the name="" property for the multiselect checkboxes (no need for adding [] at the end)
    - onclick               (string) one can pass alpine.js x-on:click directive to run some JS when the select changes it state

    - combineSelected       (bool, false) if you want to combine selected items into a single element ('2 selected' instead of displaying names)
    - multiline             (bool, false) if you want the list to extend vertically if there are more items than fit the single line
    - showFilter            (bool, false) allow to filter the list of options with a text input
    - view                  (string, 'list') the type of the list to show in the dropdown, choose between: 'list' and 'tiles'

    - placeholder           (string, default) translation key for the main select input placeholder
    - placeholder_filter    (string, default) translation key for the filter input placeholder
    - placeholder_empty     (string, default) translation key shown when the filter brings no results
{% endcomment %}



{% unless list %}
  <script>
    console.warn('Multiselect: No list of items given');
  </script>
{% endunless %}



{% liquid
  assign list = list | default: '[]'

  comment
    we need to replace all the apostrophes to use it with alpine, but only for liquid arrays, not for JS references
  endcomment
  if list[0]
    for item in list
      hash_assign item['label'] = item.label | replace: "'", "&#39;"
    endfor
  endif

  assign selected = selected | default: '[]'

  assign view = view | default: 'list'

  assign placeholder = placeholder | default: 'app.select'
  assign placeholder_filter = placeholder_filter | default: 'app.filter_list'
  assign placeholder_empty = placeholder_empty | default: 'app.filter_empty'
%}



<div
  x-data='{ selected: ({{ selected }} || []), opened: false, filter: "", list: ({{ list }} || []) }'
  x-on:click.outside="opened = false;"
  x-init="
    if(list[0] && !list[0].label){ console.warn('Multiselect: No \'label\' property for items in the list given. Parse the data correctly.', list); }
    if(list[0] && !list[0].value){ console.warn('Multiselect: No \'value\' property for items in the list given. Parse the data correctly.', list); }
    $watch('opened', (opened) => { if(opened === false){ filter = ''; } });
  "
  class="relative"
  role="listbox"
  x-bind:aria-expanded="opened"
>

  {% comment %} toggle button {% endcomment %}
  {% if combineSelected %}
  <button
    type="button"
    x-on:click="opened = !opened; {% if showFilter %} $nextTick(() => $refs.filter.focus()); {% endif %}"
    aria-controls="{{ name }}-popup"
  {% else %}
  <div
    x-on:click="opened = !opened; {% if showFilter %} $nextTick(() => $refs.filter.focus()); {% endif %}"
  {% endif %}
    class="form-select w-full flex items-center gap-2 {% if multiline %} flex-wrap {% endif %} cursor-default"
    aria-haspopup="listbox"
  >

    {% comment %} selected items {% endcomment %}
    {% if combineSelected %}
      <div
        x-cloak
        x-show="selected.length"
        x-html="(selected.length > 1) ? `${selected.length} {{ 'app.search.selected' | t }}` : list.filter(item => item.value == selected[0])[0]?.label"
        class="tag flex-grow-0 whitespace-nowrap overflow-hidden overflow-ellipsis"
      ></div>
    {% else %}
      <template x-for="item in list.filter(item => selected.includes(item.value))">
        <div
          x-cloak
          x-show="selected.length"
          class="tag flex-grow-0 flex gap-2 items-center whitespace-nowrap overflow-hidden"
          x-on:click.stop
        >
          <span
            x-html="item.label"
            class="flex-grow-0 whitespace-nowrap overflow-hidden overflow-ellipsis"
          ></span>
          <label
            x-bind:for="`{{ name }}_${item.value}`"
            class="-m-3 p-3 hover:text-interaction-hover cursor-pointer"
          >
            <span class="sr-only">{{ 'app.remove' | t }}</span>
            {% render 'theme/simple/ui/icon', icon: 'x', class: 'w-2' %}
          </label>
        </div>
      </template>
    {% endif %}

    {% comment %} select placeholder {% endcomment %}
    <span
      x-show="!selected.length"
      class="text-content-sidenote"
    >
      {{ placeholder | t }}
    </span>

    {% comment %} toggle arrow {% endcomment %}
    {% if combineSelected %}
      <i class="ms-auto">
        <span class="sr-only">{{ 'app.toggle' | t }}</span>
        {% render 'theme/simple/ui/icon', icon: 'dashDown', class: 'w-3' %}
      </i>
    {% else %}
      <button
        type="button"
        x-on:click="if(selected.length) opened = !opened; {% if showFilter %} $nextTick(() => $refs.filter.focus()); {% endif %}"
        aria-controls="{{ name }}-popup"
        class="ms-auto -my-3 -me-3 p-3"
      >
        <span class="sr-only">{{ 'app.toggle' | t }}</span>
        {% render 'theme/simple/ui/icon', icon: 'dashDown', class: 'w-3' %}
      </button>
    {% endif %}

  {% if combineSelected %}
    </button>
  {% else %}
    </div>
  {% endif %}

  {% comment %} popup {% endcomment %}
  <div
    class="-mt-px absolute top-full left-0 right-0 z-20 bg-panel"
    x-cloak
    x-show="opened"
    x-bind:aria-hidden="opened"
    id="{{ name }}-popup"
  >

    {% comment %} filtering input {% endcomment %}
    {% if showFilter %}
      <input
        type="text"
        placeholder="{{ placeholder_filter | t }}"
        x-ref="filter"
        x-model="filter"
        class="w-full"
      >
    {% endif %}

    {% comment %} filtered list of options {% endcomment %}
    <ul class="max-h-60 flex {% if view == 'list' %} flex-col {% endif %} {% if view == 'tiles' %} p-2 flex-row flex-wrap gap-2 {% endif %} overflow-y-auto border-content border-l border-r border-b {% unless showFilter %} border-t {% endunless %}">
      <template x-for="item in list">
        <li
          x-show="item.label.toLowerCase().includes(filter.toLowerCase())"
          class="hover:text-interaction-hover"
          role="option"
        >
          <label
            class="flex items-center gap-2 cursor-pointer {% if view == 'list' %} px-4 py-2 {% endif %} {% if view == 'tiles' %} tag {% endif %}"
            {% if view == 'tiles' %} x-bind:class="{ 'tag-selected': selected.indexOf(item.value) >= 0 }"{% endif %}
          >
            <input
              type="checkbox"
              {% if form %} form="{{ form }}" {% endif %}
              name="{{ name }}[]"
              x-bind:id="`{{ name }}_${item.value}`"
              x-bind:value="item.value"
              x-model="selected"
              x-on:click="{{ onclick }}"
              {% if view == 'tiles' %} class="hidden" {% endif %}
            >
            <span x-html="item.label"></span>
          </label>
        </li>
      </template>

      {% comment %} placeholder for when there are no results after filtering {% endcomment %}
      <li
        x-cloak
        x-show="list.filter(item => item.label.toLowerCase().includes(filter.toLowerCase())).length === 0"
        class="px-4 py-2"
      >
        {{ placeholder_empty | t }}
      </li>

    </ul>

  </div>

</div>
