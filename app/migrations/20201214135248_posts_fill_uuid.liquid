{% graphql posts %}
query {
  records(
    per_page: 1000
    filter: {
      table: { value: "post" }
      deleted_at: { exists: false }
      properties: [
        { name: "uuid" exists: false }
      ]
    }
    sort: [
      { created_at: { order: DESC }}
    ]
  ){
    total_entries
    results {
      id
    }
  }
}
{% endgraphql %}
{% liquid
  log posts, type: 'migration: posts_fill_uuid'
  for post in posts.records.results
    assign uuid = '' | uuid
    graphql r = 'posts/update', id: post.id, uuid: uuid
    log r, type: 'migration: posts_fill_uuid'
  endfor
%}
