  query search(
  $id: ID
  $item_id: String
  $ids: [ID!]
  $not_ids: [ID!]
  $limit: Int = 20
  $page: Int = 1
  $status: [String!]
  $owner: String
  $keyword: String
  $category: String
  $sort: [ RecordsSortInput! ] = [ { created_at: { order: DESC } } ]
  $withStatuses: Boolean = false
  $withOrders: Boolean = false
  $withInventoryItem: Boolean = false
  $withAllLangs: Boolean = false
  $withAllVariants: Boolean = false
  $lang: String!
  $price_min: String
  $price_max: String
  $organizations: [String!]
  $promoted: Boolean
  $main_variant: Boolean
  $withResults: Boolean = true
  $item_inventory_id: ID
) {
  items: records(
    per_page: $limit
    page: $page
    filter: {
      id: { value: $id, value_in: $ids, not_value_in: $not_ids }
      table: { value: "item" }
      deleted_at: { exists: false }
      properties: [
        { name: "category", starts_with: $category }
        { name: "item_id", starts_with: $item_id }
        { name: "c__status", value_in: $status }
        { name: "owner", value: $owner }
        { name: "price", range: { gte: $price_min } }
        { name: "price", range: { lte: $price_max } }
        { name: "owner", value_in: $organizations }
        { name: "promoted", value_boolean: $promoted }
        { name: "main_variant", value_boolean: $main_variant }
        { name: "c__keywords", contains: $keyword }
        { name: "item_inventory_id", value: $item_inventory_id }
      ]
    }
    sort: $sort
  ) {
    total_entries
    total_pages
    has_previous_page
    has_next_page
    results @include(if: $withResults) {
      ...item

      item_detail: related_record(
        table: "item_detail"
        join_on_property: "item_detail_ids"
        foreign_property: "id"
        filter: { properties: { name: "lang", value: $lang } }
      ) {
        id
        type: table
        name: property(name: "name")
        description: property(name: "description")
        tags: property_array(name: "tags")
        lang: property(name: "lang")
      }

      item_details: related_records(
        table: "item_detail"
        join_on_property: "item_detail_ids"
        foreign_property: "id"
        sort: { properties: { name: "lang", order: ASC } }
      ) @include(if: $withAllLangs) {
        id
        type: table
        name: property(name: "name")
        description: property(name: "description")
        tags: property_array(name: "tags")
        lang: property(name: "lang")
      }

      item_inventory: related_record(
        table: "item_inventory"
        join_on_property: "item_inventory_id"
        foreign_property: "id"
      ) {
        id
        type: table

        status: related_record(
          join_on_property: "id"
          foreign_property: "object_id"
          table: "status"
          sort: { created_at: { order: ASC } }
        ) {
          id
          created_at
          name: property(name: "name")
          object_id: property(name: "object_id")
        }

        statuses: related_records(
          join_on_property: "id"
          foreign_property: "object_id"
          table: "status"
          sort: { created_at: { order: ASC } }
        ) @include(if: $withStatuses) {
          id
          created_at
          name: property(name: "name")
          object_id: property(name: "object_id")
        }

        item_ids: property_array(name: "item_ids")
        max_in_one_order: property_int(name: "max_in_one_order")
        c__rating_count: property_int(name: "c__rating_count")
        c__rating_score: property_float(name: "c__rating_score")
        item_type: property(name: "item_type")

        owner: related_record(
          table: "organization"
          join_on_property: "owner"
          foreign_property: "id"
        ) {
          id
          type: table
          name: property(name: "name")
          first_name: property(name: "first_name")
          last_name: property(name: "last_name")
          slug: property(name: "slug")
          shipping_types: property_array(name: "shipping_types")
          delivery_fee: property_int(name: "delivery_fee")
          delivery_fees_for_cities: property_json(name: "delivery_fees_for_cities")
          c__rating_count: property_int(name: "c__rating_count")
          c__rating_score: property_float(name: "c__rating_score")

          avatar: related_record(
            table: "photo"
            join_on_property: "uuid"
            foreign_property: "object_uuid"
            filter: { properties: { name: "photo_type", value: "avatar" } }
          ) {
            photo_width: property_int(name: "photo_width")
            photo_height: property_int(name: "photo_height")
            photo: property_upload(name: "photo") {
              url
              versions
            }
          }
        }

        item: related_record(
          table: "item"
          join_on_property: "item_ids"
          foreign_property: "id"
        ) @include(if: $withInventoryItem) {
          ...item

          item_detail: related_record(
            table: "item_detail"
            join_on_property: "item_detail_ids"
            foreign_property: "id"
            filter: { properties: { name: "lang", value: $lang } }
          ) {
            id
            type: table
            name: property(name: "name")
            description: property(name: "description")
          }
        }

        items: related_records(
          table: "item"
          join_on_property: "item_ids"
          foreign_property: "id"
        ) @include(if: $withAllVariants) {
          ...item

          photos: related_records(
            table: "photo"
            join_on_property: "photo_ids"
            foreign_property: "id"
          ) {
            id
            photo_width: property_int(name: "photo_width")
            photo_height: property_int(name: "photo_height")
            photo: property_upload(name: "photo") {
              file_name
              url
              versions
            }
          }
        }
      }

      status: related_record(
        join_on_property: "id"
        foreign_property: "object_id"
        table: "status"
        sort: { created_at: { order: ASC } }
      ) @include(if: $withStatuses) {
        id
        created_at
        name: property(name: "name")
        object_id: property(name: "object_id")
      }

      line_items: related_records(
        join_on_property: "id"
        foreign_property: "item_id"
        table: "line_item"
      ) @include(if: $withOrders) {
        id
      }

      photos: related_records(
        table: "photo"
        join_on_property: "photo_ids"
        foreign_property: "id"
      ) {
        id
        photo_width: property_int(name: "photo_width")
        photo_height: property_int(name: "photo_height")
        photo: property_upload(name: "photo") {
          file_name
          url
          versions
        }
      }
    }
  }
}

fragment item on Record {
  id
  created_at
  type: table
  uuid: property(name: "uuid")
  main_variant: property(name: "main_variant")
  category: property(name: "category")
  price: property_int(name: "price")
  original_price: property_int(name: "original_price")
  quantity: property_int(name: "quantity")
  return_days: property_int(name: "return_days")
  currency: property(name: "currency")
  item_inventory_id: property(name: "item_inventory_id")
  item_detail_ids: property_array(name: "item_detail_ids")
  slug: property(name: "slug")
  sku: property(name: "sku")
  c__status: property(name: "c__status")
  promoted: property_boolean(name: "promoted")
  photo_ids: property_array(name: "photo_ids")
  attributes_ids: property_array(name: "attributes_ids")
  attributes_json: property_object(name: "attributes_json")

  affiliate_redirect_url: property(name: "affiliate_redirect_url")
  affiliate_redirect_url_terms_and_service: property(name: "affiliate_redirect_url_terms_and_service")
}
