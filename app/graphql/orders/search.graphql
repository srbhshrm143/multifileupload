query search(
  $id: ID
  $item_id: String
  $ids: [ID!]
  $limit: Int = 20
  $page: Int = 1
  $sort: RecordsSortInput = { created_at: { order: DESC } }
  $buyer: String
  $seller: String
  $status: [String!]
  $lang: String
  $load_status_history: Boolean = false
  $from: String
  $to: String
  $organizations: [String!]
  $with_reviews: Boolean = false
  $with_members: Boolean = false
) {
  orders: records(
    page: $page
    per_page: $limit
    filter: {
      id: { value: $id, value_in: $ids }
      table: { value: "order" }
      properties: [
        { name: "buyer", value: $buyer }
        { name: "item_id", value: $item_id }
        { name: "seller", value: $seller }
        { name: "c__status", value_in: $status }
        { name: "seller", value_in: $organizations }
      ]
      created_at: { lte: $to, gte: $from }
    }
    sort: [$sort]
  ) {
    total_entries
    total_pages
    has_previous_page
    has_next_page
    results {
      id
      created_at
      type: table

      shipping_first_name: property(name: "shipping_first_name")
      shipping_last_name: property(name: "shipping_last_name")
      shipping_email: property(name: "shipping_email")
      shipping_phone: property(name: "shipping_phone")
      shipping_type: property(name: "shipping_type")
      shipping_pickup_point: property(name: "shipping_pickup_point")
      payment_type: property(name: "payment_type")
      total_price_cents: property_int(name: "total_price_cents")
      abcproducts_price_cents: property_int(name: "products_price_cents")

      delivery_fee: property_int(name: "delivery_fee")
      promo_code_discount: property_int(name: "promo_code_discount")
      currency: property(name: "currency")
      promo_id: property(name: "promo_id")

      promo_code: related_record(
        join_on_property: "promo_id"
        foreign_property: "id"
        table: "promo_code"
        sort: { created_at: { order: ASC } }
      ) {
        id
        type: table
        total_discount: property_int(name: "total_discount")
        upper_limit: property_int(name: "upper_limit")
        code_type: property(name: "code_type")
        start_date: property(name: "start_date")
        end_date: property(name: "end_date")

        detail: related_record(
          table: "promo_code_detail"
          join_on_property: "id"
          foreign_property: "promo_code_id"
          filter: { properties: { name: "lang", value: $lang } }
        ) {
          id
          type: table
          description: property(name: "description")
          lang: property(name: "lang")
        }
      }

      c__status: property(name: "c__status")
      shipping_address_id: property(name: "shipping_address_id")
      shipping_address: related_record(
        join_on_property: "shipping_address_id"
        foreign_property: "id"
        table: "address"
      ) {
        full_name: property(name: "full_name")
        country: property(name: "country")
        city: property(name: "city")
        state: property(name: "state")
        street: property(name: "street")
        zip: property(name: "zip")
        building_number: property(name: "building_number")
        flat_number: property(name: "flat_number")
      }

      buyer: related_record(
        join_on_property: "buyer"
        foreign_property: "id"
        table: "profile"
      ) {
        ...profile
        user: related_user(
          join_on_property: "user_id"
          foreign_property: "id"
        ) {
          id
          email
        }
      }

      seller_id: property(name: "seller")
      seller: related_record(
        join_on_property: "seller"
        foreign_property: "id"
        table: "organization"
      ) {
        ...profile
        contact_emails: property(name: "contact_emails")
        offline_stores: property_array(name: "offline_stores")
        shipping_types: property_array(name: "shipping_types")
        delivery_fee: property_int(name: "delivery_fee")
        delivery_fees_for_cities: property_json(name: "delivery_fees_for_cities")

        members: related_records(
          table: "relationship"
          join_on_property: "id"
          foreign_property: "r_id"
          filter: {
            properties: { name: "name", value: "organization_membership" }
          }
          sort: { created_at: { order: DESC } }
        ) @include(if: $with_members) {
          id
          l_id: property(name: "l_id")
          profile: related_record(table: "profile", join_on_property: "l_id") {
            id
            username: property(name: "username")
            user: related_user(
              join_on_property: "user_id"
              foreign_property: "id"
            ) {
              id
              email
            }
          }
        }
      }

      line_items: related_records(
        join_on_property: "id"
        foreign_property: "order_id"
        table: "line_item"
        sort: { properties: { name: "name", order: ASC } }
      ) {
        id
        created_at
        properties
        item_id: property(name: "item_id")
        quantity: property_int(name: "quantity")
        currency: property(name: "currency")
        price_cents: property_int(name: "price_cents")
        total_price_cents: property_int(name: "total_price_cents")

        status: related_record(
          join_on_property: "id"
          foreign_property: "object_id"
          table: "status"
          sort: { created_at: { order: ASC } }
        ) {
          id
          created_at
          name: property(name: "fullname")
        }
        item: related_record(
          join_on_property: "item_id"
          foreign_property: "id"
          table: "venue_rooms"
        ) {
          id
          properties
          venue_room_name: property(name: "venue_room_name")
          venue_id: property(name: "venue_id")
          quantity: property_int(name: "quantity")
          price: property_int(name: "price_cents")
          category: property(name: "category")
          return_days: property_int(name: "return_days")
          attributes_ids: property_array(name: "attributes_ids")
          attributes_json: property_object(name: "attributes_json")
          item_detail: related_record(
            table: "item_detail"
            join_on_property: "item_detail_ids"
            foreign_property: "id"
            filter: { properties: { name: "lang", value: $lang } }
          ) {
            id
            type: table
            name: property(name: "name")
            description: property(name: "description")
            lang: property(name: "lang")
          }
          seller_id: related_record(
            table: "venues"
            join_on_property: "venue_id"
            foreign_property: "id"
          ){
            id
            seller_id: property(name: "profile_id")
          }

          item_inventory: related_record(
            # table: "item_inventory"
            # join_on_property: "item_inventory_id"
            # foreign_property: "id"
            table: "venue_rooms"
            join_on_property: "id"
            foreign_property: "id"
          ) {
            id
            type: table
            item_id: property(name: "item_id")
            item_ids: property(name: "item_ids")
            quantity: property_int(name: "quantity")
            max_in_one_order: property_int(name: "max_in_one_order")
            sku: property(name: "sku")
            item_type: property(name: "item_type")
            c__status: property(name: "c__status")
          }

          photos: related_records(
            table: "photo"
            join_on_property: "photo_ids"
            foreign_property: "id"
          ) {
            id
            photo_width: property_int(name: "photo_width")
            photo_height: property_int(name: "photo_height")
            photo: property_upload(name: "photo") {
              file_name
              url
              versions
            }
          }
        }
        line_item_return: related_record(
          join_on_property: "id"
          foreign_property: "line_item_id"
          table: "line_item_return"
        ) {
          id
          quantity: property_int(name: "quantity")

          status: related_record(
            join_on_property: "id"
            foreign_property: "object_id"
            table: "status"
            sort: { created_at: { order: ASC } }
          ) {
            id
            created_at
            name: property(name: "name")
            timestamp: property(name: "timestamp")
          }
        }
      }

      # TODO: not yet possible
      # transaction: related_record(
      #   join_on_property: "id"
      #   foreign_property: "order_ids"
      #   table: "transaction"
      #   sort: { created_at: { order: ASC } }
      # ) {
      #   id
      #   created_at
      #   c__status: property(name: "c__status")
      # }

      order_delivery: related_record(
        join_on_property: "id"
        foreign_property: "order_id"
        table: "order_delivery"
        sort: { created_at: { order: ASC } }
      ) {
        id
        delivery_information: property(name: "delivery_information")
        status: related_record(
          join_on_property: "id"
          foreign_property: "object_id"
          table: "status"
          sort: { created_at: { order: ASC } }
        ) {
          id
          created_at
          name: property(name: "name")
          timestamp: property(name: "timestamp")
        }
      }

      status: related_record(
        join_on_property: "id"
        foreign_property: "object_id"
        table: "status"
        sort: { created_at: { order: ASC } }
      ) {
        id
        created_at
        name: property(name: "name")
        timestamp: property(name: "timestamp")
      }

      statuses: related_records(
        join_on_property: "id"
        foreign_property: "object_id"
        table: "status"
        sort: { created_at: { order: ASC } }
      ) @include(if: $load_status_history) {
        id
        created_at
        name: property(name: "name")
        timestamp: property(name: "timestamp")
      }

      reviews: related_records(
        join_on_property: "id"
        foreign_property: "order_id"
        table: ["item_review"]
        filter: { properties: { name: "score", exists: false } }
      ) @include(if: $with_reviews) {
        id
      }
    }
  }
}

fragment profile on Record {
  id
  type: table
  name: property(name: "name")
  first_name: property(name: "first_name")
  last_name: property(name: "last_name")
  slug: property(name: "slug")
  uuid: property(name: "uuid")
  language: property(name: "language")
}
