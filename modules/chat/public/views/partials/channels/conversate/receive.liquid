{% comment %}
  Send email notification
{% parse_json data %}
    {
      "email": "email"
      "username": "",
      "sender": {{ context["params"]["sender_name"] | to_json }},
      "message": {{ context["params"]["message"] | to_json }}
    }
{% endparse_json %}
  graphql notify = 'modules/chat/notify', data: data
  log notify
%}
{% endcomment %}

{% liquid
  function current_profile = 'lib/current_organization_profile', user_id: context.current_user.id
  assign room_id = context.params.room_id

  function conversation = 'modules/chat/lib/queries/conversations/find_by_participant', id: room_id, participant_id: current_profile.id
  if conversation
    assign message_safe = context.params.message | raw_escape_string
    assign object = '{}' | parse_json
    hash_assign object['conversation_id'] = conversation.id
    hash_assign object['autor_id'] = current_profile.id
    hash_assign object['message'] = message_safe
    function message = 'modules/chat/lib/commands/messages/create', object: object
    if message.valid != true
      log message, 'ERROR receive message'
    else
      function res = 'modules/chat/lib/commands/conversations/mark_unread', conversation: conversation, current_profile: current_profile
    endif
  else
    log "Skippind. Message will be persisted on sender side", 'channel_actions/conversate skip_message'
  endif

%}
